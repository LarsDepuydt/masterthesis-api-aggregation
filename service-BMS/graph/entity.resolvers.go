package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"strconv"

	"github.com/LarsDepuydt/masterthesis-api-aggregation/service-BMS/graph/model"
)

// FindRoomByID is the resolver for the findRoomByID field.
func (r *entityResolver) FindRoomByID(ctx context.Context, id string) (*model.Room, error) {
	// We only need to return the ID here - actual room data comes from FMS
	return &model.Room{ID: id}, nil
}

// FindSensorByExternalID is the resolver for the findSensorByExternalID field.
func (r *entityResolver) FindSensorByExternalID(ctx context.Context, externalID string) (*model.Sensor, error) {
	// Fetch metadata
	metadata, err := r.Resolver.FetchMetaData()
	if err != nil {
		return nil, fmt.Errorf("failed to fetch metadata: %v", err)
	}

	// Find the sensor with the matching externalID
	for _, m := range metadata {
		if strconv.Itoa(int(m.ExternalID)) == externalID {
			return &model.Sensor{
				ExternalID: externalID,
				SourcePath: m.Source,
				Unit:       m.Unit,
			}, nil
		}
	}

	// If no sensor is found, return nil
	return nil, nil
}

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
