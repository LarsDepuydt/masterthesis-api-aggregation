package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"slices"

	"github.com/LarsDepuydt/masterthesis-api-aggregation/service-FMS/graph/model"
)

// Buildings is the resolver for the buildings field.
func (r *queryResolver) Buildings(ctx context.Context, ids []string) ([]*model.Building, error) {
	var result []*model.Building
	for _, building := range r.BuildingsData {
		if len(ids) == 0 || slices.Contains(ids, building.ID) {
			result = append(result, building)
		}
	}
	return result, nil
}

// Floors is the resolver for the floors field.
func (r *queryResolver) Floors(ctx context.Context, ids []string) ([]*model.Floor, error) {
	var result []*model.Floor
	for _, building := range r.BuildingsData {
		for _, floor := range building.Floors {
			if len(ids) == 0 || slices.Contains(ids, floor.ID) {
				result = append(result, floor)
			}
		}
	}
	return result, nil
}

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context, ids []string) ([]*model.Room, error) {
	var result []*model.Room
	for _, building := range r.BuildingsData {
		for _, floor := range building.Floors {
			for _, room := range floor.Rooms {
				if len(ids) == 0 || slices.Contains(ids, room.ID) {
					result = append(result, room)
				}
			}
		}
	}
	return result, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
