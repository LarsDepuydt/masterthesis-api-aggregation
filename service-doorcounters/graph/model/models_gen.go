// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type Building struct {
	ID string `json:"id"`
	// A list of entrances belonging to this building.
	Entrances []*Entrance `json:"entrances"`
}

func (Building) IsEntity() {}

// Represents an entrance of a building, which may have associated telemetry data.
// This type is part of a federated schema, indicated by the @key directive.
type Entrance struct {
	// The unique identifier of the entrance.
	ID string `json:"id"`
	// The name or designation of the entrance (e.g., 'Main Entrance', 'Service Entrance').
	Name string `json:"name"`
	// Retrieves telemetry data recorded at this entrance within a specified
	// time window.
	//
	// Note on Telemetry Data:
	// The data is sourced from laser counters. Each passage detected by the counter
	// is recorded. The sum of these passages, divided by two, is sent to the server
	// every hour. This process provides a general indication of activity but does
	// not differentiate between people entering or exiting. The numbers are most
	// reliable when aggregated over a longer period, such as a full day, to
	// represent the total number of people who have passed through the entrance.
	// They should not be used as a precise real-time count of people inside
	// the building or for determining direction of movement.
	TelemetryData []*TelemetryData `json:"telemetryData"`
}

func (Entrance) IsEntity() {}

// Provides the root fields for querying entrance data.
type Query struct {
}

// Represents a single data point from an entrance's telemetry system.
//
// Note on Data Collection:
// This data is generated by laser counters. Each passage detected is summed,
// divided by 2, and reported hourly. This means the 'value' represents a
// calculated metric of passages over the preceding hour, not a direct
// count of individuals or a directional movement.
type TelemetryData struct {
	// The timestamp for this telemetry data point, typically indicating the
	// end of the hourly collection period, in ISO 8601 format.
	Timestamp string `json:"timestamp"`
	// The calculated value of passages recorded during the collection period,
	// divided by 2. Due to the collection method (sum of passages / 2 per hour),
	// this number is most meaningful when aggregated over longer periods like a full day.
	Value *int32 `json:"value,omitempty"`
}
