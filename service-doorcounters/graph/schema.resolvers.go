package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"time"

	"github.com/LarsDepuydt/masterthesis-api-aggregation/service-doorcounters/graph/model"
)

// GetTelemetryData is the resolver for the getTelemetryData field.
func (r *queryResolver) GetTelemetryData(ctx context.Context, startTime time.Time, endTs *time.Time) ([]*model.TelemetryData, error) {
	// Convert GraphQL Time to int64 (UNIX timestamp in milliseconds)
	startTs := startTime.Unix() * 1000
	var endTime int64
	if endTs != nil {
		endTime = endTs.Unix() * 1000
	} else {
		endTime = time.Now().Unix() * 1000 // Default to current time if not provided
	}

	data, err := FetchTelemetryData(startTs, endTime)
	if err != nil {
		return nil, err
	}

	// Convert timestamps to ISO 8601 format for GraphQL response
	var graphqlData []*model.TelemetryData
	for _, d := range data {
		graphqlData = append(graphqlData, &model.TelemetryData{
			Timestamp: time.Unix(d.Timestamp/1000, 0).Format(time.RFC3339),
			DoorA:     d.DoorA,
			DoorB:     d.DoorB,
			DoorC:     d.DoorC,
		})
	}

	return graphqlData, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
