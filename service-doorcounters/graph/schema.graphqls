"""
A custom scalar representing time values. In the Go resolvers, this scalar
is mapped to the ISO 8601 standard for time.
"""
scalar Time

extend type Building @key(fields: "id") {
    id: ID! @external
    """
    A list of entrances belonging to this building.
    """
    entrances: [Entrance!]!
}

"""
Represents an entrance of a building, which may have associated telemetry data.
This type is part of a federated schema, indicated by the @key directive.
"""
type Entrance @key(fields: "id") {
    """
    The unique identifier of the entrance.
    """
    id: ID!
    """
    The name or designation of the entrance (e.g., 'Main Entrance', 'Service Entrance').
    """
    name: String!
    """
    Retrieves telemetry data recorded at this entrance within a specified
    time window.

    Note on Telemetry Data:
    The data is sourced from laser counters. Each passage detected by the counter
    is recorded. The sum of these passages, divided by two, is sent to the server
    every hour. This process provides a general indication of activity but does
    not differentiate between people entering or exiting. The numbers are most
    reliable when aggregated over a longer period, such as a full day, to
    represent the total number of people who have passed through the entrance.
    They should not be used as a precise real-time count of people inside
    the building or for determining direction of movement.
    """
    telemetryData(
        """
        The start time of the window for fetching telemetry data.
        """
        startTime: Time!
        """
        The end time of the window for fetching telemetry data. If omitted,
        the query will use now as the end time.
        """
        endTime: Time
    ): [TelemetryData!]!
}

"""
Represents a single data point from an entrance's telemetry system.

Note on Data Collection:
This data is generated by laser counters. Each passage detected is summed,
divided by 2, and reported hourly. This means the 'value' represents a
calculated metric of passages over the preceding hour, not a direct
count of individuals or a directional movement.
"""
type TelemetryData {
    """
    The timestamp for this telemetry data point, typically indicating the
    end of the hourly collection period, in ISO 8601 format.
    """
    timestamp: String! # While documented, consider using the `Time!` type directly for stronger type enforcement.
    """
    The calculated value of passages recorded during the collection period,
    divided by 2. Due to the collection method (sum of passages / 2 per hour),
    this number is most meaningful when aggregated over longer periods like a full day.
    """
    value: Int
}

"""
Provides the root fields for querying entrance data.
"""
type Query {
    """
    Retrieves a list of building entrances.
    If no IDs are provided, all accessible entrances are returned.
    Note that the telemetry data available for these entrances is subject
    to the collection methodology described in the Entrance type.
    """
    getEntrances(
        """
        An optional list of entrance IDs to filter the results.
        If this list is empty or null, all accessible entrances are returned.
        """
        ids: [ID!]
    ): [Entrance!]!
}
